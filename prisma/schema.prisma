generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  workoutPlans WorkoutPlan[]
  exercises    Exercise[]
  sessions     Session[]
  bodyMetrics  BodyMetric[]
  accounts     Account[]
  sessions_auth Session_Auth[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session_Auth {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions_auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model WorkoutPlan {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  sessions        Session[]

  @@map("workout_plans")
}

model Exercise {
  id       String  @id @default(cuid())
  name     String
  category String  // push/pull/legs/core
  isCustom Boolean @default(false) @map("is_custom")
  userId   String? @map("user_id") // null for default exercises, set for custom ones
  
  // Relations
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  sets             Set[]

  @@map("exercises")
}

model WorkoutExercise {
  id            String @id @default(cuid())
  workoutPlanId String @map("workout_plan_id")
  exerciseId    String @map("exercise_id")
  targetSets    Int    @map("target_sets")
  targetReps    Int    @map("target_reps")
  restSeconds   Int    @map("rest_seconds")
  order         Int
  
  // Relations
  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercise    Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("workout_exercises")
}

model Session {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  workoutPlanId String    @map("workout_plan_id")
  startedAt     DateTime  @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  sets        Set[]

  @@map("sessions")
}

model Set {
  id          String    @id @default(cuid())
  sessionId   String    @map("session_id")
  exerciseId  String    @map("exercise_id")
  setNumber   Int       @map("set_number")
  weight      Float?
  reps        Int?
  completedAt DateTime? @map("completed_at")
  
  // Relations
  session  Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
}

model BodyMetric {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  weight             Float?
  bodyFatPercentage  Float?   @map("body_fat_percentage")
  recordedAt         DateTime @default(now()) @map("recorded_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("body_metrics")
}
